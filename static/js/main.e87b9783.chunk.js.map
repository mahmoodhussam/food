{"version":3,"sources":["components/Recipe.js","App.js","reportWebVitals.js","index.js"],"names":["Recipe","title","calories","image","ingredients","className","map","ingredient","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","responce","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","placeholder","recipe","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAoBeA,EAjBC,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,MAAMC,EAA8B,EAA9BA,SAASC,EAAqB,EAArBA,MAAMC,EAAe,EAAfA,YACnC,OACI,sBAAKC,UAAU,OAAf,UACI,oBAAIA,UAAU,QAAd,SAAuBJ,IACvB,qBAAII,UAAU,QAAd,wBAAkCH,KAClC,oBAAIG,UAAU,QAAd,wBACA,8BAEQD,EAAYE,KAAI,SAAAC,GAAU,OACtB,6BAAKA,EAAWC,YAI5B,qBAAKC,IAAKN,EAAOO,IAAI,MAAML,UAAU,iBCsClCM,MAlDf,WAEE,IAFa,EAIgBC,mBAAS,IAJzB,mBAINC,EAJM,KAIEC,EAJF,OAKcF,mBAAS,IALvB,mBAKNG,EALM,KAKCC,EALD,OAMYJ,mBAAS,IANrB,mBAMNK,EANM,KAMAC,EANA,KAObC,qBAAU,WACRC,MACA,CAACH,IACH,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCL,EAApC,mBATf,WASe,oBARd,qCAOG,cACXM,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJA,2CAAH,qDAahB,OACE,sBAAKrB,UAAU,MAAf,UACE,uBAAMwB,SANW,SAAAC,GACnBA,EAAEC,iBACFb,EAASH,IAIuBV,UAAU,OAAxC,UACE,uBACA2B,KAAK,OACLC,MAAOlB,EACPmB,SAbc,SAAAJ,GAClBd,EAAUc,EAAEK,OAAOF,QAaf5B,UAAU,QACV+B,YAAY,yBACZ,wBAAQJ,KAAK,SAAS3B,UAAU,SAAhC,uBAEF,qBAAKA,UAAU,YAAf,SAEIQ,EAAQP,KAAI,SAAA+B,GAAM,OAChB,cAAC,EAAD,CAEApC,MAAOoC,EAAOA,OAAOC,MACrBpC,SAAYmC,EAAOA,OAAOnC,SAC1BC,MAASkC,EAAOA,OAAOlC,MACvBC,YAAeiC,EAAOA,OAAOjC,aAJxBiC,EAAOA,OAAOC,gBC9BhBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e87b9783.chunk.js","sourcesContent":["import React from 'react'\nimport './Recipe.css'\n\nconst Recipe  = ({title,calories,image,ingredients})=>{\n    return(\n        <div className=\"item\">\n            <h1 className=\"space\">{title}</h1>\n            <h3 className=\"space\">Calories : {calories}</h3>\n            <h1 className=\"space\">Ingredient</h1>\n            <div>\n                {\n                    ingredients.map(ingredient=>(\n                        <li>{ingredient.text}</li>\n                    ))\n                }\n            </div>\n            <img src={image} alt=\"img\" className=\"food_img\"/> \n        </div>\n    )\n}\nexport default Recipe;","import React,{useEffect,useState} from 'react';\nimport './App.css';\nimport Recipe from './components/Recipe';\n\nfunction App() {\n  \n  const APP_ID = \"fec97a92\"\n  const APP_KEY = \"47c4591e9b614568aff5012b09d4c7b7\"\n  const [recipes,setRecipes] = useState([])\n  const [search,setSearch] = useState(\"\")\n  const [query,setQuery] = useState(\"\")\n  useEffect(()=>{\n    getRecipes()\n  },[query])\n  const getRecipes = async ()=>{\n    const responce = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`)\n    const data = await responce.json()\n    setRecipes(data.hits)\n    console.log(data.hits)\n  }\n  const inputChange = e=>{\n    setSearch(e.target.value)    \n  }\n  const handelSubmit = e =>{\n    e.preventDefault();\n    setQuery(search)\n  }\n  return (\n    <div className=\"App\">\n      <form onSubmit={handelSubmit} className=\"form\">\n        <input \n        type=\"text\"\n        value={search}\n        onChange={inputChange}\n        className=\"input\"\n        placeholder=\"Search for food ....\"/>\n        <button type=\"submit\" className=\"button\">Search</button>\n      </form>\n      <div className=\"container\">\n        {\n          recipes.map(recipe=>(\n            <Recipe\n            key={recipe.recipe.label}\n            title={recipe.recipe.label}\n            calories = {recipe.recipe.calories}\n            image = {recipe.recipe.image}\n            ingredients = {recipe.recipe.ingredients}\n            />\n          ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}